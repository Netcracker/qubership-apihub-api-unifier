{
  "openapi": "3.0.1",
  "info": {
    "title": "Sample Pet Store App",
    "description": "This is a sample server for a pet store.",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "name": "API Support",
      "url": "https://www.example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "https://example.com"
  },
  "servers": [
    {
      "url": "https://example.com/v1"
    }
  ],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet [upd]",
        "description": "Update an **existing** pet",
        "operationId": "updatePet",
        "parameters": [
          {
            "name": "testParam",
            "in": "query",
            "description": "CHANGED test param",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateDate",
            "in": "query",
            "description": "Date of the modification",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "$ref": "#/components/parameters/x-request-id"
          }
        ],
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pet updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "example": "325d31a4-700c-11ea-bc55-0242ac130003"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "InvalidId": {
                    "$ref": "#/components/examples/InvalidId"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Cat"
                  },
                  {
                    "$ref": "#/components/schemas/Dog"
                  }
                ],
                "discriminator": {
                  "propertyName": "petType"
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Pet created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Cat"
                    },
                    {
                      "$ref": "#/components/schemas/Dog"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "petType"
                  }
                },
                "examples": {
                  "LazyCat": {
                    "summary": "Some lazy cat",
                    "value": {
                      "petType": "Cat",
                      "id": 0,
                      "category": {
                        "id": 0,
                        "name": "Mood1",
                        "@type": "LazyCat",
                        "fuzzy": "medium"
                      },
                      "name": "MurMur",
                      "tags": [
                        {
                          "id": 123,
                          "name": "Funny"
                        }
                      ],
                      "status": "available",
                      "colour": "Black",
                      "huntingSkill": "clueless"
                    }
                  },
                  "CrazyCat": {
                    "$ref": "#/components/examples/CrazyCat"
                  }
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "example": "325d31a4-700c-11ea-bc55-0242ac130003"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "deprecated": true,
        "x-api-kind": "experimental",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            }
          },
          {
            "name": "right",
            "in": "query",
            "description": "Name of the user right to access",
            "required": true,
            "schema": {
              "type": "string",
              "example": "OwnerAccess"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "deprecated": true,
        "x-api-kind": "no-BWC",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value",
            "content": {}
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "Deletes a pet",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "Security key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "content": {}
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "uploads an image",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "type": "string",
                    "description": "Additional data to pass to server"
                  },
                  "file": {
                    "type": "string",
                    "description": "file to upload",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "Place an order for a pet",
        "operationId": "placeOrder",
        "requestBody": {
          "description": "order placed for purchasing the pet",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "content": {}
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "JsonUser": {
                  "$ref": "#/components/examples/JsonUser"
                }
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "XMLUser": {
                  "summary": "External XML example",
                  "externalValue": "http://example.org/examples/address-example.xml"
                }
              }
            },
            "text/plain": {
              "examples": {
                "user": {
                  "summary": "User example in text plain format",
                  "externalValue": "http://foo.bar/examples/user-example.txt"
                }
              }
            },
            "*/*": {
              "examples": {
                "user": {
                  "summary": "User example in other format",
                  "externalValue": "http://foo.bar/examples/user-example.whatever"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get list of users",
        "description": "Get list of users",
        "operationId": "getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input params",
            "content": {}
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "description": "List of user object",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "description": "List of user object",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion",
            "content": {}
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Internal category identifier",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Categoty name",
            "type": "string"
          },
          "@type": {
            "description": "Internal type of the category",
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "LazyCatCategory": {
        "description": "A representation of a category for Lazy Cats only",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          },
          {
            "type": "object",
            "properties": {
              "fuzzy": {
                "type": "string",
                "description": "The fuzzy measure",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "aggressive"
                ]
              }
            },
            "required": [
              "fuzzy"
            ]
          }
        ]
      },
      "CrazyCatCategory": {
        "description": "A representation of a category for Crazy Cats only",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          },
          {
            "type": "object",
            "properties": {
              "crazzy": {
                "type": "string",
                "description": "The crazzy measure",
                "enum": [
                  "low",
                  "average",
                  "aggressive"
                ]
              }
            },
            "required": [
              "crazzy"
            ]
          }
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password",
            "maxLength": 20,
            "minLength": 6,
            "pattern": "^[A-Za-z0-9]\\w{8,}$"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          }
        },
        "additionalProperties": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer"
            },
            "text": {
              "type": "string"
            }
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "name": {
            "type": "string",
            "example": "Funny"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "title": "Pet",
        "required": [
          "name",
          "petType"
        ],
        "type": "object",
        "discriminator": {
          "propertyName": "petType"
        },
        "externalDocs": {
          "description": "Wiki info about Pet",
          "url": "https://en.wikipedia.org/wiki/Pet"
        },
        "properties": {
          "petType": {
            "description": "### Type of the animal\nThe discriminator parameter of the pet traits.\nWhile many people have kept many different species of animals in captivity over the course of human history, only a relative few have been kept long enough to be considered domesticated.\nOther types of animal, notably monkeys, have never been domesticated but are still sold and kept as pets.\nThere are also inanimate objects that have been kept as \"pets\", either as a form of a game or humorously (e.g. the Pet Rock or Chia Pet).\nSome wild animals are kept as pets, such as tigers, even though this is illegal. **There is a market for illegal pets.**\n\n#### Domesticated\n[Domesticated](https://en.wikipedia.org/wiki/Domesticated) pets are most common. \nA domesticated animal is a species that has been made fit for a human environment by being consistently kept in captivity and selectively bred over a long enough period of time that it exhibits marked differences in behavior and appearance from its wild relatives.\nDomestication contrasts with taming, which is simply when an un-domesticated, wild animal has become tolerant of human presence, and perhaps even enjoys it.\n",
            "type": "string",
            "enum": [
              "Cat",
              "Dog"
            ]
          },
          "id": {
            "description": "Pet identifier. Common for all pet types.",
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "description": "Name of the pet",
            "type": "string",
            "example": "doggie"
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "Pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          },
          "colour": {
            "type": "string",
            "description": "Colour of the pet",
            "enum": [
              "Black",
              "Yellow",
              "White",
              "Gray",
              "Red"
            ]
          },
          "theVeryFirstLongNamedParentOfTheSelectedAnimal": {
            "allOf": [
              {
                "description": "1-st parent of the pet"
              },
              {
                "$ref": "#/components/schemas/Pet"
              }
            ]
          },
          "anotherOneLongNamedParentOfTheSelectedAnimal": {
            "allOf": [
              {
                "description": "2-st parent of the pet"
              },
              {
                "$ref": "#/components/schemas/Pet"
              }
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Cat": {
        "title": "Cat",
        "description": "The **cat** (*Felis catus*) is a domestic species of small carnivorous mammal.\nIt is the only domesticated species in the family Felidae and is often referred to as the domestic cat to distinguish it from the wild members of the family.\nA cat can either be a house cat, a farm cat or a feral cat; the latter ranges freely and avoids human contact.\nDomestic cats are valued by humans for companionship and their ability to kill rodents. About 60 cat breeds are recognized by various cat registries.\n\nThe cat is similar in anatomy to the other felid species: \n  - it has a strong flexible body, \n  - quick reflexes, \n  - sharp teeth and retractable claws adapted to killing small prey. \n'### Its night vision and sense of smell are well developed.'\nCat communication includes vocalizations like meowing, purring, trilling, hissing, growling and grunting as well as cat-specific body language.\nA predator that is most active at dawn and dusk (crepuscular), the cat is a solitary hunter but a social species.\nIt can hear sounds too faint or too high in frequency for human ears, such as those made by mice and other small mammals.\nCats also secrete and perceive pheromones.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "properties": {
              "category": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LazyCatCategory"
                  },
                  {
                    "$ref": "#/components/schemas/CrazyCatCategory"
                  }
                ],
                "discriminator": {
                  "propertyName": "@type"
                }
              },
              "huntingSkill": {
                "type": "string",
                "description": "The measured skill for hunting",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive"
                ]
              }
            },
            "required": [
              "huntingSkill"
            ],
            "x-component-object": "Any Cat info"
          }
        ]
      },
      "Dog": {
        "title": "Dog",
        "description": "A representation of a dog",
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "properties": {
              "packSize": {
                "type": "integer",
                "format": "int32",
                "description": "the size of the pack the dog is from",
                "default": 0,
                "minimum": 0
              }
            },
            "required": [
              "packSize"
            ],
            "externalDocs": {
              "description": "Additional info see in dictionary",
              "url": "http://example.com"
            },
            "example": {
              "petType": "Dog",
              "id": 0,
              "category": {
                "id": 0,
                "name": "Mood1"
              },
              "name": "Gaff",
              "tags": [
                {
                  "id": 123,
                  "name": "Funny"
                }
              ],
              "status": "available",
              "colour": "Black",
              "packSize": 10
            }
          }
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "description": "An error description",
        "type": "object",
        "properties": {
          "status": {
            "description": "HTTP Status Code",
            "type": "number"
          },
          "code": {
            "description": "Internal string error code. Mandatory in response.",
            "type": "string"
          },
          "message": {
            "description": "The attribute contains an error message.",
            "type": "string"
          }
        },
        "required": [
          "status",
          "code",
          "message"
        ]
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "openID": {
        "type": "openIdConnect",
        "openIdConnectUrl": "http://petstore.swagger.io/oauth/dialog"
      }
    },
    "examples": {
      "CrazyCat": {
        "summary": "Another crazy cat",
        "value": {
          "petType": "Cat",
          "id": 1,
          "category": {
            "id": 0,
            "name": "Mood1",
            "@type": "CrazyCat",
            "crazzy": "average"
          },
          "name": "Crazyyyy",
          "tags": [
            {
              "id": 111,
              "name": "Horror"
            }
          ],
          "status": "available",
          "colour": "Red",
          "huntingSkill": "clueless"
        }
      },
      "JsonUser": {
        "summary": "Description of the user in JSON format",
        "value": {
          "id": 123456,
          "username": "markrozenberg",
          "firstName": "Mark",
          "lastName": "Rozenberg",
          "email": "mark.rozenberg@mail.ru",
          "password": "00qwerty00",
          "phone": "+7 921 123-45-67",
          "userStatus": 1
        }
      },
      "InvalidId": {
        "summary": "Error in provided ID",
        "value": {
          "status": 400,
          "code": "InvalidIDsupplied",
          "message": "Invalid ID supplied"
        }
      }
    },
    "parameters": {
      "x-request-id": {
        "description": "Common request identifier",
        "name": "x-request-id",
        "in": "header",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "325d31a4-700c-11ea-bc55-0242ac130003"
        },
        "required": true
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "List of the fields to exclude from response. \n\nThis parameter accepts comma-separated list of attributes in the response resource representation. \nAcceptable values are request-specific and are determined by the response format. \nBy default, full verbosity is assumed. \n\nIf this parameter is specified, only the requested attributes are included in response, along with mandatory ID. \nNon-existent attributes are ignored in this case.\n",
        "schema": {
          "type": "string"
        },
        "example": "category.name"
      }
    }
  }
}